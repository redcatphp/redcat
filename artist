#!/usr/bin/env php
<?php
if(ob_get_length()) ob_get_clean();

global $argv;
$setup = isset($argv[1])&&in_array($argv[1],['setup','install','update'])?$argv[1]:false;

if($setup){
	(new RedCatInstaller)->$setup();
	return;
}

if(!is_dir($vendor='packages')&&!is_dir($vendor='vendor')){
	echo "No vendor dir found run 'artist install' command before\n\n";
	return;
}

if(is_file('redcat.php')){
	$redcat = require_once 'redcat.php';
	$packagesPath = REDCAT.$vendor.'/redcatphp';
}
elseif(is_file(__DIR__.'/redcat.php')){
	define('REDCAT',__DIR__.'/');
	define('REDCAT_CWD',getcwd().'/');
	require_once __DIR__.'/../../autoload.php';
	$redcat = RedCat\Framework\App::bootstrap();
	$packagesPath = realpath(__DIR__.'/..');
}
else{
	echo "No RedCat installation found in the current directory, you can make one using composer with this command:'composer create-project redcatphp/redcatphp'\n\n";
	return;
}

$localCMD = [
	'plugins'=>function($plugin)use($redcat){
		if(!$redcat['artist.pluginDirsMap']) $redcat['artist.pluginDirsMap'] = [];
		$x = explode('=',$plugin);
		list($dir,$namespace) = $x;
		$redcat['artist.pluginDirsMap'][$dir] = trim($namespace,'"\'');
	}
];
$modified = false;
for($i=1,$c=count($argv);$i<$c;$i++){
	if(false===$p=strpos($argv[$i],'=')) break;
	$k = trim(substr($argv[$i],0,$p),'-');
	$v = substr($argv[$i],$p+1);
	if(isset($localCMD[$k]))
		$localCMD[$k]($v);
	unset($argv[$i]);
	$modified = true;
}
if($modified) $_SERVER['argv'] = $argv = array_values($argv);

$application = $redcat->create(Symfony\Component\Console\Application::class);
$commandPaths = [
	$packagesPath.'/framework/Artist'=>'RedCat\Framework\Artist',
];
if($redcat['artist.pluginDirsMap']){
	foreach($redcat['artist.pluginDirsMap'] as $dir=>$namespace){
		$redcat->autoload($dir,$namespace);
	}
	$commandPaths = array_merge($commandPaths,$redcat['artist.pluginDirsMap']);
}
foreach($commandPaths as $dir=>$ns){
	foreach(glob($dir.'/*.php') as $com){
		$class = $ns.'\\'.pathinfo($com,PATHINFO_FILENAME);
		$reflectionClass = new ReflectionClass($class);
		if($reflectionClass->IsInstantiable())
			$application->add($redcat->create($class));
	}
}
$application->run();


class RedCatInstaller{
	function __construct(){
		$this->startOutput();
		$this->init();
		$this->installComposer();
	}
	protected function init(){
		$this->tmpDir = getcwd().'/.tmp/artist/';
		if(!is_dir($this->tmpDir)&&!@mkdir($this->tmpDir)){
			$this->tmpDir = sys_get_temp_dir().'/.artist/';
		}
		
		if(!is_dir($d=$this->tmpDir.'composer'))
			mkdir($d,0777,true);
		putenv("COMPOSER_HOME=".$d);
		
		if(!is_writable('composer.json')){
			echo "composer.json is not writeable";
			return;
		}
	}
	function setup(){
		$this->run();
		if(!is_file('composer.lock')){
			$this->install();
		}
		else{
			$this->update();
		}
	}
	function update(){
		if(!is_file('composer.lock')){
			$this->install();
			return;
		}
		$composer = $this->getComposerBin();
		passthru("$composer update -vvv 2>&1");
		if(is_file('.git')){
			passthru("git pull 2>&1");
		}
		
	}
	function install(){
		$composer = $this->getComposerBin();
		
		if(is_file('composer.lock')){
			echo "Install allready done, run :'artist update' instead\n\n";
			return;
		}
		
		if(is_file('composer.json')){
			$json = json_decode(file_get_contents('composer.json'),true);
		}
		else{
			$json = [
				"minimum-stability" => "dev",
				"config" => [
					"vendor-dir" => "packages",
					"bin-dir" => "packages/bin"
				]
			];
		}
		
		$vendorDir = isset($json['config']['vendor-dir'])?$json['config']['vendor-dir']:'vendor';
		
		if(is_dir($vendorDir)){
			if(!is_writable($vendorDir)){
				echo "vendor-dir is not writeable\n\n";
				return;
			}
		}
		else{
			if(!is_writable(getcwd())){
				echo "current dir is not writeable\n\n";
				return;
			}
		}
		
		if(isset($json['require'])){
			if(isset($json['extra']['artist']['tmp-require'])){
				$json['extra']['artist']['tmp-require'] = $json['require']+$json['extra']['artist']['tmp-require'];
			}
			else{
				$json['extra']['artist']['tmp-require'] = $json['require'];
			}
			$json['require'] = (object)[];
			file_put_contents('composer.json',json_encode($json,JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT));
			echo "composer require fxp/composer-asset-plugin -vvv\n";
			passthru("$composer require fxp/composer-asset-plugin -vvv 2>&1");
			$json = json_decode(file_get_contents('composer.json'),true);
			$json['require'] += $json['extra']['artist']['tmp-require'];
			unset($json['extra']['artist']['tmp-require']);
			file_put_contents('composer.json',json_encode($json,JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT));
			passthru("$composer update -vvv 2>&1");
		}
		else{
			passthru("$composer require fxp/composer-asset-plugin -vvv 2>&1");
		}
		
		
		//if(is_file($installFile='install.php')&&!rename($installFile,$installFile.'s')){
			//echo 'Unable to rename installation script, you should rename or remove it manually';
		//}
	}

	protected function startOutput(){
		ignore_user_abort(false);
		set_time_limit(0);
		if(php_sapi_name()!='cli'){
			header("Expires: Mon, 26 Jul 1997 05:00:00 GMT" ); 
			header("Last-Modified: " . gmdate("D, d M Y H:i:s" ) . " GMT" );
			header("Pragma: no-cache");
			header("Cache-Control: no-cache");
			header("Expires: -1");
			header("Cache-Control: post-check=0, pre-check=0", false);
			header("Cache-Control: no-store, no-cache, must-revalidate");
			ob_implicit_flush(true);
			@ob_end_flush();
			echo str_repeat(" ",1024);
			echo '<pre>';
		}
		else{
			echo "\n";
		}
	}

	protected function getComposerBin(){
		if(strtoupper(substr(PHP_OS, 0, 3))==='WIN'){
			if(file_exists($b='C:\\bin\\composer.bat'))
				return $b;
			if(file_exists($b='C:\\bin\\composer.phar'))
				return $b;
		}
		else{
			if(file_exists($b='/usr/local/bin/composer'))
				return $b;
			if(file_exists($b='/usr/local/bin/composer.phar'))
				return $b;
		}
		if(file_exists($b='composer'))
			return "php $b";
		if(file_exists($b='composer.phar'))
			return "php $b";
	}

	protected function installComposer(){
		if($this->getComposerBin()) return;
		
		$composerPhar = 'composer.phar';
		$composerSetup = 'composer-setup.php';
		echo "Downloading composer installer\n";
		$composerSetupContent = fopen('https://getcomposer.org/installer','r');
		if(!$composerSetupContent){
			echo "An error occured, unable to download composer installer\n";
			return;
		}
		file_put_contents($composerSetup,$composerSetupContent);
		if(!file_exists($composerSetup)){
			echo "An error occured, unable to write composer installer, it\'s probably a rights problem\n";
			return;
		}
		passthru('php '.$composerSetup.' 2>&1');
		
		unlink($composerSetup);
		if(!file_exists($composerPhar)){
			echo "An error occured, unable to install a local composer\n";
			return;
		}

		echo "Local composer installed, you can use it from the root path of your application\n";
		rename($composerPhar,'composer');
	}	
}